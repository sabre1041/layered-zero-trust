apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: '20'
  labels:
    app: qtodo
  name: qtodo
  namespace: qtodo
spec:
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      deployment: qtodo
  template:
    metadata:
      annotations:
        checksum/app-configmap-envvars: {{ include (print $.Template.BasePath "/app-config-env.yaml") . | sha256sum }}
{{- if eq .Values.app.spire.enabled true }}
        checksum/app-spiffe-helper-config: {{ include (print $.Template.BasePath "/spiffe-helper-config.yaml") . | sha256sum }}
        checksum/app-spiffe-vault-client-config: {{ include (print $.Template.BasePath "/spiffe-vault-client-config.yaml") . | sha256sum }}
{{- end }}
      labels:
        app: qtodo
        deployment: qtodo
      name: qtodo
    spec:
{{- if eq .Values.app.spire.enabled true }}
      initContainers:
      - name: init-spiffe-helper
        image: {{ .Values.app.images.spiffeHelper.name }}:{{ .Values.app.images.spiffeHelper.tag }}
        imagePullPolicy: {{ .Values.app.images.spiffeHelper.pullPolicy }}
        args:
          - '-config'
          - /etc/helper.conf
          - '-daemon-mode=false'
        volumeMounts:
          - name: spiffe-helper-config
            readOnly: true
            mountPath: /etc/helper.conf
            subPath: helper.conf
          - name: spiffe-workload-api
            readOnly: true
            mountPath: /spiffe-workload-api
          - name: svids
            mountPath: /svids
      - name: init-spiffe-vault-client
        image: {{ .Values.app.images.spiffeVaultClient.name }}:{{ .Values.app.images.spiffeVaultClient.tag }}
        imagePullPolicy: {{ .Values.app.images.spiffeVaultClient.pullPolicy }}
        command:
          - python3
          - /opt/app-root/src/spiffe-vault-client.py
          - '--init'
        env:
          - name: VAULT_URL
            value: {{ .Values.app.vault.url }}
          - name: VAULT_ROLE
            value: {{ .Values.app.vault.role }}
          - name: VAULT_SECRET_PATH
            value: {{ .Values.app.vault.secretPath }}
          - name: DB_USERNAME
            value: {{ .Values.postgresql.auth.username }}
          - name: CREDENTIALS_FILE
            value: /run/secrets/db-credentials/credentials.properties
          - name: JWT_TOKEN_FILE
            value: /svids/jwt.token
        volumeMounts:
          - name: svids
            mountPath: /svids
          - name: db-credentials
            mountPath: /run/secrets/db-credentials
          - name: spiffe-vault-client
            mountPath: /opt/app-root/src
{{- end }}
      containers:
{{- if and .Values.app.spire.enabled .Values.app.spire.sidecars }}
      - name: spiffe-helper
        image: {{ .Values.app.images.spiffeHelper.name }}:{{ .Values.app.images.spiffeHelper.tag }}
        imagePullPolicy: {{ .Values.app.images.spiffeHelper.pullPolicy }}
        args:
          - '-config'
          - /etc/helper.conf
        resources: {}
        volumeMounts:
          - name: spiffe-helper-config
            readOnly: true
            mountPath: /etc/helper.conf
            subPath: helper.conf
          - name: spiffe-workload-api
            readOnly: true
            mountPath: /spiffe-workload-api
          - name: svids
            mountPath: /svids
      - name: spiffe-vault-client
        image: {{ .Values.app.images.spiffeVaultClient.name }}:{{ .Values.app.images.spiffeVaultClient.tag }}
        imagePullPolicy: {{ .Values.app.images.spiffeVaultClient.pullPolicy }}
        command:
        - python3
        - /opt/app-root/src/spiffe-vault-client.py
        resources: {}
        securityContext: {}
        env:
        - name: VAULT_URL
          value: {{ .Values.app.vault.url }}
        - name: VAULT_ROLE
          value: {{ .Values.app.vault.role }}
        - name: VAULT_SECRET_PATH
          value: {{ .Values.app.vault.secretPath }}
        - name: DB_USERNAME
          value: {{ .Values.postgresql.auth.username }}
        - name: CREDENTIALS_FILE
          value: /run/secrets/db-credentials/credentials.properties
        - name: JWT_TOKEN_FILE
          value: /svids/jwt.token
        volumeMounts:
        - name: svids
          mountPath: /svids
          readOnly: true
        - name: db-credentials
          mountPath: /run/secrets/db-credentials
        - name: spiffe-vault-client
          mountPath: /opt/app-root/src
          readOnly: true
{{- end }}
      - name: qtodo
        image: {{ .Values.app.images.main.name }}:{{ .Values.app.images.main.tag }}
        imagePullPolicy: {{ .Values.app.images.main.pullPolicy }}
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        envFrom:
          - configMapRef:
              name: qtodo-config-env
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: QUARKUS_DATASOURCE_JDBC_URL
          value: 'jdbc:postgresql://qtodo-db:5432/{{ .Values.postgresql.auth.database }}'
        - name: QUARKUS_HTTP_HOST
          value: '0.0.0.0'
        - name: QUARKUS_HTTP_PORT
          value: '8080'
        - name: QUARKUS_HIBERNATE_ORM_DATABASE_GENERATION
          value: 'drop-and-create'
{{- if eq .Values.app.spire.enabled false }}
        - name: QUARKUS_DATASOURCE_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.secretName }}
              key: username
        - name: QUARKUS_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.postgresql.auth.secretName }}
              key: password
{{- else }}
        - name: QUARKUS_CONFIG_LOCATIONS
          value: file:/run/secrets/db-credentials/credentials.properties
        - name: QUARKUS_OIDC_CREDENTIALS_SECRET
          valueFrom:
            secretKeyRef:
              name: oidc-client-secret
              key: client-secret
{{- end }}
{{- if eq .Values.app.spire.enabled true }}
        volumeMounts:
          - name: db-credentials
            mountPath: /run/secrets/db-credentials
{{- end }}
        resources: {}
      serviceAccountName: qtodo
{{- if eq .Values.app.spire.enabled true }}
      volumes:
        - name: spiffe-helper-config
          configMap:
            name: spiffe-helper
            defaultMode: 420
        - name: svids
          emptyDir: {}
        - name: spiffe-workload-api
          csi:
            driver: csi.spiffe.io
            readOnly: true
        - name: db-credentials
          emptyDir: {}
        - name: spiffe-vault-client
          configMap:
            name: spiffe-vault-client
{{- end }}

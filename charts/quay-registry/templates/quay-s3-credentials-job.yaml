---
apiVersion: batch/v1
kind: Job
metadata:
  name: quay-s3-credentials-setup
  namespace: {{ .Values.quay.namespace }}
  annotations:
    argocd.argoproj.io/sync-wave: "8"  # Layer 1: Setup S3 credentials
spec:
  template:
    spec:
      serviceAccountName: quay-s3-setup
      containers:
      - name: setup-s3-credentials
        image: registry.redhat.io/openshift4/ose-cli:latest
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Setting up S3 credentials for Quay from NooBaa MOG ObjectBucketClaim..."
          
          echo "Using oc for Kubernetes API access..."
          
          # Check if ObjectBucketClaim exists and is bound
          echo "Checking ObjectBucketClaim quay-bucket status..."
          oc get objectbucketclaim quay-bucket -n openshift-storage
          
          # Wait for ObjectBucketClaim to be in Bound state
          echo "Waiting for ObjectBucketClaim quay-bucket to be Bound (timeout: 10 minutes)..."
          oc wait --for=jsonpath='{.status.phase}'=Bound objectbucketclaim/quay-bucket -n openshift-storage --timeout=600s || {
            echo "ERROR: ObjectBucketClaim failed to reach Bound state within timeout"
            oc describe objectbucketclaim quay-bucket -n openshift-storage
            exit 1
          }
          
          # Use the actual secret and configmap names (not the objectBucketName from spec)
          CONFIG_MAP="quay-bucket"
          SECRET_NAME="quay-bucket"
          
          echo "ConfigMap: $CONFIG_MAP"
          echo "Secret: $SECRET_NAME"
          
          # Extract S3 credentials
          ACCESS_KEY=$(oc get secret $SECRET_NAME -n openshift-storage -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 -d)
          SECRET_KEY=$(oc get secret $SECRET_NAME -n openshift-storage -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 -d)
          BUCKET_NAME=$(oc get configmap $CONFIG_MAP -n openshift-storage -o jsonpath='{.data.BUCKET_NAME}')
          S3_ENDPOINT=$(oc get configmap $CONFIG_MAP -n openshift-storage -o jsonpath='{.data.BUCKET_HOST}')
          
          echo "Retrieved S3 credentials successfully"
          echo "Bucket: $BUCKET_NAME"
          echo "Endpoint: $S3_ENDPOINT"
          
                # Get the template config secret (with placeholders)
                oc get secret {{ .Values.quay.configBundleSecret.name }} -n {{ .Values.quay.namespace }} -o jsonpath='{.data.config\.yaml}' | base64 -d > /tmp/config.yaml
                
                # Replace placeholders with actual values using a different delimiter to handle special characters
                sed -i "s|PLACEHOLDER_ACCESS_KEY|$ACCESS_KEY|g" /tmp/config.yaml
                sed -i "s|PLACEHOLDER_SECRET_KEY|$SECRET_KEY|g" /tmp/config.yaml
                sed -i "s|PLACEHOLDER_BUCKET_NAME|$BUCKET_NAME|g" /tmp/config.yaml
                
                # Create a NEW secret with the actual credentials (not modifying the Git-managed one)
                echo "Creating quay-config-with-s3 secret with real credentials..."
                oc create secret generic quay-config-with-s3 \
                  --from-file=config.yaml=/tmp/config.yaml \
                  -n {{ .Values.quay.namespace }} \
                  --dry-run=client -o yaml | oc apply -f -
                
                echo "Quay S3 credentials setup completed successfully"
                echo "Created quay-config-with-s3 secret with real S3 credentials"
      restartPolicy: OnFailure
  backoffLimit: 5
